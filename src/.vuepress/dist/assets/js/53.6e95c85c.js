(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{407:function(t,v,e){"use strict";e.r(v);var r=e(47),_=Object(r.a)({},(function(){var t=this,v=t.$createElement,e=t._self._c||v;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"_1-mvvm框架绪论"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-mvvm框架绪论"}},[t._v("#")]),t._v(" 1.MVVM框架绪论")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),e("p",[t._v("了解MVVM框架产生的背景，有助于掌握未来的发展，也能渐进的感受技术的演进，这样对技术的探索是很有帮助的")])]),t._v(" "),e("h2",{attrs:{id:"🐣第一部分-mvvm的前世今生"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#🐣第一部分-mvvm的前世今生"}},[t._v("#")]),t._v(" 🐣第一部分：MVVM的前世今生")]),t._v(" "),e("h3",{attrs:{id:"_1-mvc-mvp-mvvm介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-mvc-mvp-mvvm介绍"}},[t._v("#")]),t._v(" 1.MVC,MVP,MVVM介绍")]),t._v(" "),e("ul",[e("li",[t._v("MVC：传统的前后端不分离项目")]),t._v(" "),e("li",[t._v("MVP：单向的 View - Presenter - Model")]),t._v(" "),e("li",[t._v("MVVM：View - ViewModel - Model")])]),t._v(" "),e("hr"),t._v(" "),e("h3",{attrs:{id:"_2-mvvm的起源"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-mvvm的起源"}},[t._v("#")]),t._v(" 2.MVVM的起源")]),t._v(" "),e("p",[t._v("MVVM是 Model - ViewModel - View 的简写。微软的WPF带来了新的技术体验，例如Silverlight，音频，视频，3D，动画，这导致了软件UI层更加细节化，可定制化。同时，在技术层面，WPF也带来了诸如 Binding, Routed, Events, Command, DataTemplate, ControlTemplate等新特性")]),t._v(" "),e("p",[t._v("MVVM框架的由来便是MVP（View - Presenter - Model）模式 与 WPF结合起来的应用方式，演变过来的一种新型架构框架。他立足于原有的MVP框架，并把WPF的新特性融合进去，以应对客户日益复杂的需求变化")]),t._v(" "),e("p",[t._v("拓展：WPF做了什么：将 View 和 Presenter 做了双向")]),t._v(" "),e("hr"),t._v(" "),e("h3",{attrs:{id:"_3-mv-框架的演变"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-mv-框架的演变"}},[t._v("#")]),t._v(" 3.MV*框架的演变")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://dojotoolkit.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("dojo"),e("OutboundLink")],1)]),t._v(" "),e("li",[t._v("jQuery：无可替代，操作DOM服务（链式调用，等思想我们可以学习，都很经典）")]),t._v(" "),e("li",[t._v("backbone：函数式编程，让代码MVC，解决代码又丑又烂")]),t._v(" "),e("li",[t._v("splie && canjs：也是MVC，但是加了绑定的思想")]),t._v(" "),e("li",[t._v("第一个MVVM框架：O8年出现，"),e("a",{attrs:{href:"https://knockoutjs.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Knockout官网"),e("OutboundLink")],1)]),t._v(" "),e("li",[t._v("batman.js && emben")]),t._v(" "),e("li",[t._v("angler && vue && react")]),t._v(" "),e("li",[t._v("meteor：前后端统一框架")])]),t._v(" "),e("hr"),t._v(" "),e("h3",{attrs:{id:"_4-对mvmm的思考"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-对mvmm的思考"}},[t._v("#")]),t._v(" 4.对MVMM的思考")]),t._v(" "),e("ul",[e("li",[t._v("MVC,MVP,MVVM")]),t._v(" "),e("li",[t._v("DI,IOC,AOP,OOP")]),t._v(" "),e("li",[t._v("ORM,RESTful")])]),t._v(" "),e("blockquote",[e("p",[t._v("框架是过眼云烟，思想才是永恒")])]),t._v(" "),e("hr")])}),[],!1,null,null,null);v.default=_.exports}}]);