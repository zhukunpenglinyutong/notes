(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{404:function(t,s,a){"use strict";a.r(s);var n=a(47),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"_7-函数式编程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-函数式编程"}},[t._v("#")]),t._v(" 7.函数式编程")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("等待书写中...")])]),t._v(" "),a("hr"),t._v(" "),a("h2",{attrs:{id:"第一部分-函数式编程基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第一部分-函数式编程基础"}},[t._v("#")]),t._v(" 第一部分：函数式编程基础")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[a("strong",[t._v("函数式编程不是用函数来编程，也不是传统的面向过程编程。")]),t._v(" 主要是将复杂的函数 符合成简单的函数（计算理论，递归论，或者拉姆达演算）。运算过程尽量写成一系列嵌套的函数调用")]),t._v(" "),a("p",[t._v("举例：React高阶组件")])]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"函数编程的基本概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数编程的基本概念"}},[t._v("#")]),t._v(" 函数编程的基本概念")]),t._v(" "),a("ul",[a("li",[t._v("函数是第一等公民")]),t._v(" "),a("li",[t._v("只用表达式，不用语句")]),t._v(" "),a("li",[t._v("没有副作用")]),t._v(" "),a("li",[t._v("不修改状态")]),t._v(" "),a("li",[t._v("引用透明（函数运行只靠参数）")])]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"核心概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#核心概念"}},[t._v("#")]),t._v(" 核心概念")]),t._v(" "),a("ul",[a("li",[t._v("纯函数")]),t._v(" "),a("li",[t._v("函数的柯里化")]),t._v(" "),a("li",[t._v("函数组合")]),t._v(" "),a("li",[t._v("Point Free")]),t._v(" "),a("li",[t._v("声明式与命令式代码")]),t._v(" "),a("li",[t._v("惰性求值")])]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"纯函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#纯函数"}},[t._v("#")]),t._v(" 纯函数")]),t._v(" "),a("p",[t._v("对于相同的输入，永远会得到相同的输出，而且没有任何可观察的副作用，也不依赖外部环境的状态")]),t._v(" "),a("p",[t._v("鉴于这个特性能做什么？")]),t._v(" "),a("ul",[a("li",[t._v("可以做缓存，因为第一次，我知道输入什么了，第二次就不用计算了，提高性能")]),t._v(" "),a("li",[t._v("纯函数不仅可以有效降低系统的复杂度，还有很多很棒的特性，例如可缓存性")])]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"函数的柯里化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数的柯里化"}},[t._v("#")]),t._v(" 函数的柯里化")]),t._v(" "),a("ul",[a("li",[t._v("传递给函数一部分参数来调用它，让它返回一个函数去处理剩下的参数")]),t._v(" "),a("li",[t._v("作用就是解决了函数不纯的问题，将函数依赖的变量以参数的形式组合成 新的函数")]),t._v(" "),a("li",[t._v("好处：事实上柯里化是一种预加载函数的方法，通过传递较少的参数，得到一个已经记住了这些参数的新函数。某种意义上讲，这是一种对参数的缓存，是一种非常高效的编写函数的方式")])]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"函数组合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数组合"}},[t._v("#")]),t._v(" 函数组合")]),t._v(" "),a("ul",[a("li",[t._v("将需要层层嵌套的函数 通过一个组合函数包一层，使其使用起来更舒适")])]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"point-free"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#point-free"}},[t._v("#")]),t._v(" Point Free")]),t._v(" "),a("ul",[a("li",[t._v("把一些对象自带的方法转化成纯函数，不要命名转瞬即逝的中间变量")]),t._v(" "),a("li",[t._v("例如：const f = str => str.toString().split('')")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 解决")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("toString")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("str")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("split")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("str")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("split")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" fn "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("compost")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("split")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("' '")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" toString"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [1, 2, 3]")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这种风格能帮助我们减少不必要的命名，让代码保持简洁和通用")]),t._v("\n")])])]),a("hr"),t._v(" "),a("h3",{attrs:{id:"声明式与命令式代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#声明式与命令式代码"}},[t._v("#")]),t._v(" 声明式与命令式代码")]),t._v(" "),a("ul",[a("li",[t._v("命令式代码：我们通过编写一条又一条指令去让计算机执行一些动作，这其中会涉及到很多繁杂的细节")]),t._v(" "),a("li",[t._v("声明式代码：通过写表达式的方式来声明我们想干什么，而不是通过一步一步的指示")]),t._v(" "),a("li",[t._v("优缺点：\n"),a("ul",[a("li",[t._v("函数式编程这种声明式的代码，对于无副作用的纯函数，我们完全可以不考虑函数内部是如何实现的，专注于编写业务代码，优化代码时，目光只需要集中在这些稳定坚固的函数内部即可")]),t._v(" "),a("li",[t._v("不纯的函数式代码会产生副作用，或者依赖外部系统环境，使用他们的时候总要考虑这些不干净的副作用。在复杂的系统中，这对于程序员的心智来说是极大的负担")])])])]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"惰性求值-惰性函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#惰性求值-惰性函数"}},[t._v("#")]),t._v(" 惰性求值，惰性函数")]),t._v(" "),a("ul",[a("li",[t._v("在指令式语言中以下代码会按顺序执行，由于每个函数都有可能改动或者依赖于其内部的状态。因此必须顺序执行")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 求累加的函数（未使用惰性函数）")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("num")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" addVale "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        addVale "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" i\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" addVale\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2000000000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1s")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2000000000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1s")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2000000000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1s")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2000000000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1s")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 总共4s")]),t._v("\n")])])]),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 求累加的函数（使用 惰性函数）")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("num")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" addVale "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        addVale "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" i\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 函数函数")]),t._v("\n  \t"),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("add")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      addVale\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" addVale\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2000000000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1s")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2000000000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0s")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2000000000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0s")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2000000000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0s")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 总共1s")]),t._v("\n")])])]),a("hr"),t._v(" "),a("h2",{attrs:{id:"第二部分-更加专业的术语"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第二部分-更加专业的术语"}},[t._v("#")]),t._v(" 第二部分：更加专业的术语")]),t._v(" "),a("ul",[a("li",[t._v("高阶函数")]),t._v(" "),a("li",[t._v("尾递归优化")]),t._v(" "),a("li",[t._v("闭包")]),t._v(" "),a("li",[t._v("容器，Functor")]),t._v(" "),a("li",[t._v("错误处理，Either，AP")]),t._v(" "),a("li",[t._v("IO")]),t._v(" "),a("li",[t._v("Monad")])]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"高阶函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#高阶函数"}},[t._v("#")]),t._v(" 高阶函数")]),t._v(" "),a("ul",[a("li",[t._v("本来我函数不能做很复杂的事情，你给我传过来一个复杂的函数，我一组合就能干很复杂的事情了")]),t._v(" "),a("li",[t._v("将函数当参数，把传入的函数做一个封装，然后返回这个封装函数，达到更高程度的抽象。")])]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"尾递归优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#尾递归优化"}},[t._v("#")]),t._v(" 尾递归优化")]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"闭包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#闭包"}},[t._v("#")]),t._v(" 闭包")]),t._v(" "),a("ul",[a("li",[t._v("在函数里面返回一个函数就会造成闭包，更深层次的我好像也知道，给忘了")])]),t._v(" "),a("hr"),t._v(" "),a("h2",{attrs:{id:"第三部分-流行的函数式编程库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第三部分-流行的函数式编程库"}},[t._v("#")]),t._v(" 第三部分：流行的函数式编程库")]),t._v(" "),a("ul",[a("li",[t._v("RxJS")]),t._v(" "),a("li",[t._v("cycleJs")]),t._v(" "),a("li",[a("strong",[t._v("lodash.js")]),t._v(", lazy（惰性求值）")]),t._v(" "),a("li",[t._v("underscoreJS")]),t._v(" "),a("li",[t._v("ramadjs")])]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"_1-rxjs-必学"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-rxjs-必学"}},[t._v("#")]),t._v(" 1.RxJS（必学）")]),t._v(" "),a("ul",[a("li",[t._v("诞生以来一直不温不火，单它的函数响应式编程（FRP）理念非常先进（函数式编程 FP）")]),t._v(" "),a("li",[t._v("在RxJS中，所有的外部输入（用户输入，网络请求等等）都被试做一种事件流（这种机制特别适合处理游戏，上上下下）")])]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"_2-lodash"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-lodash"}},[t._v("#")]),t._v(" 2.lodash")]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"_3-underscorejs-以后学"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-underscorejs-以后学"}},[t._v("#")]),t._v(" 3.underscoreJS（以后学）")])])}),[],!1,null,null,null);s.default=r.exports}}]);